diff --git a/node_modules/hyperswarm/index.js b/node_modules/hyperswarm/index.js
index 2b56c73..6e6f4da 100644
--- a/node_modules/hyperswarm/index.js
+++ b/node_modules/hyperswarm/index.js
@@ -10,8 +10,8 @@ const PeerDiscovery = require('./lib/peer-discovery')
 
 const MAX_PEERS = 64
 const MAX_PARALLEL = 3
-const MAX_CLIENT_CONNECTIONS = Infinity // TODO: Change
-const MAX_SERVER_CONNECTIONS = Infinity
+const MAX_CLIENT_CONNECTIONS = 100 // TODO: Change
+const MAX_SERVER_CONNECTIONS = 100
 
 const ERR_MISSING_TOPIC = 'Topic is required and must be a 32-byte buffer'
 const ERR_DESTROYED = 'Swarm has been destroyed'
@@ -20,7 +20,7 @@ const ERR_DUPLICATE = 'Duplicate connection'
 const KEEP_ALIVE = b4a.alloc(0)
 
 module.exports = class Hyperswarm extends EventEmitter {
-  constructor (opts = {}) {
+  constructor (opts, sig, dht_keys, keychain = {}) {
     super()
     const {
       seed,
@@ -32,12 +32,16 @@ module.exports = class Hyperswarm extends EventEmitter {
       maxParallel = MAX_PARALLEL,
       firewall = allowAll
     } = opts
-    this.keyPair = keyPair
 
     this.dht = opts.dht || new DHT({
       bootstrap: opts.bootstrap,
       debug: opts.debug
-    })
+    }, sig, dht_keys, keychain)
+
+    this.keyPair = dht_keys.get()
+    this.keychain = keychain.get()
+    this.checkedSigs = [sig]
+
     this.server = this.dht.createServer({
       firewall: this._handleFirewall.bind(this),
       relayThrough: this._maybeRelayConnection.bind(this)
@@ -237,10 +241,22 @@ module.exports = class Hyperswarm extends EventEmitter {
 
     const peerInfo = this.peers.get(b4a.toString(remotePublicKey, 'hex'))
     if (peerInfo && peerInfo.banned) return true
+    if (payload !== null) {
+    if (!payload.mid) return true
+    const checked = this.checkSignature(payload.mid, remotePublicKey)
+    if (!checked) return true
+    //This id is already in use
+    if (this.checkedSigs.some(a => a === payload.mid)) return true
+    }
   
     return this._firewall(remotePublicKey, payload)
   }
 
+  checkSignature(signature, remotePublicKey) {
+    const verify = this.keychain.verify(remotePublicKey, signature, this.keychain.publicKey)
+    return verify ? true : false
+   }
+
   _handleServerConnectionSwap (existing, conn) {
     let closed = false
 
